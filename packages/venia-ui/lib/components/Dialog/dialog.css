.mask {
    /* The mask takes up and masks the entire screen. */
    position: fixed;
    top: 0;
    left: 0;
    height: 100vh;
    width: 100vw;
    background-color: rgb(var(--venia-grey-darker));
    opacity: 0.7;

    /* The Mask sits on top of all other content. */
    z-index: 3;

    /* The Mask is hidden by default. */
    visibility: hidden;
}

.mask_open {
    composes: mask;

    /* The Mask changes to being visible. */
    visibility: visible;
}

.root {
    /* The Dialog takes up the entire screen and sits on top of the mask. */
    position: fixed;
    top: 0;
    left: 0;
    height: 100vh;
    width: 100vw;
    background-color: transparent;
    z-index: 4;

    /* Set pointer-events to none to allow the mask to be clicked. */
    pointer-events: none;

    /*
     *  The Dialog is a grid container with its container
     *  horizontally and vertically centered.
     */
    display: grid;
    grid-template-rows: 1fr auto 1fr;
    grid-template-columns: 1fr auto 1fr;
    grid-template-areas:
        '. ......... .'
        '. container .'
        '. ......... .';

    /* The Dialog is hidden by default. */
    opacity: 0;
    visibility: hidden;

    /* The Dialog animates to being closed. */
    transition-duration: 192ms;
    transition-timing-function: var(--venia-anim-out);
    transition-property: opacity, visibility;
}

.root_open {
    composes: root;

    /* The Dialog gets a shadow when open. */
    box-shadow: 1px 0 rgb(var(--venia-border));

    /* The Dialog animates to being open. */
    opacity: 1;
    visibility: visible;
    transition-duration: 224ms;
    transition-timing-function: var(--venia-anim-in);
}

.container {
    /* The container is the only grid item in the Dialog grid. */
    grid-area: container;
    background-color: rgb(var(--venia-background-color));

    /* It sets maximum sizes so its body can handle overflow. */
    height: 100%;
    max-height: 90vh;
    /* Minimum keeps a 16:9 aspect ratio. */
    min-height: 416px;
    width: 740px;

    /* Nothing is allowed to overflow container itself. */
    overflow: hidden;

    /* Container is itself a grid container for its children. */
    display: grid;
    grid-template-rows: auto 1fr;
    grid-template-areas:
        'header'
        'body';

    /* Container can be the target of pointer events. */
    pointer-events: auto;
}

/*
 *  Dialog Header styles.
 */

.header {
    grid-area: header;

    border-bottom: 1px solid rgb(var(--venia-border));

    /* The Header is itself a grid container for its children. */
    display: grid;
    grid-auto-flow: column;
    padding: 0.875rem;
}

.headerText {
    /* Vertically align the title in the middle. */
    align-self: center;

    color: rgb(var(--venia-text-alt));
}

.headerButton {
    /* Horizontally align the close button to the right. */
    justify-self: right;
}

/*
 *  Dialog Body styles.
 */

.body {
    grid-area: body;

    padding: 1em;
    overflow: auto;

    /* The Body is itself a grid container for its children. */
    display: grid;
    grid-template-rows: 1fr auto;
}

.buttons {
    padding: 2.5rem;

    display: grid;
    /* Force the buttons to be the same size (their content could differ). */
    grid-template-columns: 1fr 1fr;
    column-gap: 2rem;

    justify-self: center;
}

.confirmButton {
    composes: root_highPriority from '../Button/button.css';
    overflow: hidden;
}

.cancelButton {
    composes: root_normalPriority from '../Button/button.css';
    overflow: hidden;
}

/*
 * Mobile-specific styles.
 *
 * Instead of being a full-page modal,
 * display within the confines of the target drawer.
 */

@media (max-width: 960px) {
    .root {
        top: 0;
        bottom: 0;
        height: 100%;

        left: auto;
        right: 0;
        max-width: 360px;

        /* In mobile, there's only the contents grid item. */
        grid-template-rows: 1fr;
        grid-template-columns: 1fr;
        grid-template-areas: 'container';

        transform: translate3d(100%, 0, 0);
        transition-property: opacity, transform, visibility;
    }

    .root_open {
        composes: root;

        transform: translate3d(0, 0, 0);
    }

    .container {
        max-height: 100%;
        width: 100%;
    }
}
